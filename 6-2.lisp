; (defun bin-search (x vec &key (key #'identity) (start 0) end)
;   (let ((len (or end (length vec))))                     
;     (and (not (zerop len))
;          (finder x vec start (1- len) key))))

; (defun finder (x vec start end key)
;   (let ((range (- end start)))
;     (cond ((zerop range) (when (eql x (funcall key (aref vec start)))
;                            (aref vec start)))
;           ((> 0 range) nil)
;           (t (let* ((mid (+ start (round range 2)))
;                     (x2 (funcall key (aref vec mid))))
;                (cond ((< x x2) (finder x vec start (1- mid) key))
;                      ((> x x2) (finder x vec (1+ mid) end key))
;                      (t (aref vec mid))))))))

(defun bin-search (x vec &key (start 0) (end (1- (length vec))) (key #'identity))
  (let ((range (- end start)))
    (cond ((zerop range) 
           (when (eql x (funcall key (aref vec start)))
             (aref vec start)))
          ((> 0 range) nil)
          (t (let* ((mid (+ start (round range 2)))
                    (x2 (funcall key (aref vec mid))))
               (cond ((< x x2) (bin-search x vec :start start :end (1- mid) :key key))
                     ((> x x2) (bin-search x vec :start (1+ mid) :end end :key key))
                     (t (aref vec mid))))))))